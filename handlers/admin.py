from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, CommandObject

from config import ADMIN_IDS
from database import Database
from keyboards import get_admin_keyboard, get_confirmation_keyboard, get_moderation_keyboard

router = Router()
db = Database()

def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

@router.message(F.text == '‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å')
async def admin_panel(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        return
    
    await message.answer(
        "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
        reply_markup=get_admin_keyboard()
    )

@router.message(F.text == 'üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–µ—Ñ—Ñ–µ—Ä–∞–º–∏')
async def manage_deffers(message: Message):
    if not is_admin(message.from_user.id):
        return
    
    await message.answer(
        "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–µ—Ñ—Ñ–µ—Ä–∞–º–∏:\n\n"
        "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–µ—Ñ—Ñ–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
        "<code>/add_deffer —Ç–≥_–∞–π–¥–∏</code>\n\n"
        "–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–µ—Ñ—Ñ–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
        "<code>/remove_deffer —Ç–≥_–∞–π–¥–∏</code>",
        parse_mode='HTML'
    )

@router.message(F.text == 'üîÑ –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É')
async def clear_stats_confirm(message: Message):
    if not is_admin(message.from_user.id):
        return
    
    await message.answer(
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É?(–ù–µ –∫–∞—Å–∞–µ—Ç—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è)\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
        reply_markup=get_confirmation_keyboard('clear_week')
    )

@router.message(F.text == 'üèÜ –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è')
async def calculate_winner(message: Message):
    if not is_admin(message.from_user.id):
        return
    
    deffers_stats = db.get_all_deffers_stats()
    if not deffers_stats:
        await message.answer("‚ùå –ù–µ—Ç –¥–µ—Ñ—Ñ–µ—Ä–æ–≤ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞")
        return
    
    winner = deffers_stats[0]
    winner_id, winner_username, week_count, total_count = winner
    
    await message.answer(
        f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –Ω–µ–¥–µ–ª–∏:\n"
        f"–î–µ—Ñ—Ñ–µ—Ä: {winner_username or f'ID: {winner_id}'}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤: {week_count}\n"
        "–£–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∏ –æ—á–∏—Å—Ç–∏—Ç—å –Ω–µ–¥–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É?",
        reply_markup=get_confirmation_keyboard('notify_winner')
    )

@router.message(F.text == 'üìà –¢–æ–ø –Ω–µ–¥–µ–ª–∏')
async def top_deffers(message: Message):
    if not is_admin(message.from_user.id):
        return
    
    deffers_stats = db.get_all_deffers_stats()
    if not deffers_stats:
        await message.answer("‚ùå –ù–µ—Ç –¥–µ—Ñ—Ñ–µ—Ä–æ–≤")
        return
    
    top_text = "üìà –¢–æ–ø –¥–µ—Ñ—Ñ–µ—Ä–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é:\n\n"
    for i, (user_id, username, week_count, total_count) in enumerate(deffers_stats, 1):
        display_name = username if username else f"deffer_{user_id}"
        top_text += f"{i}. @{display_name} (ID: {user_id})\n"
        top_text += f"–ù–µ–¥–µ–ª—è: {week_count} | –í—Å–µ–≥–æ: {total_count}\n\n"
    
    await message.answer(top_text)

@router.message(F.text == 'üìã –°–ø–∏—Å–æ–∫ –¥–µ—Ñ—Ñ–µ—Ä–æ–≤')
async def list_deffers(message: Message):
    if not is_admin(message.from_user.id):
        return
    
    deffers_stats = db.get_all_deffers_stats()
    if not deffers_stats:
        await message.answer("‚ùå –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–µ—Ñ—Ñ–µ—Ä–æ–≤")
        return
    
    deffers_text = "üìã –°–ø–∏—Å–æ–∫ –¥–µ—Ñ—Ñ–µ—Ä–æ–≤:\n\n"
    for i, (user_id, username, week_count, total_count) in enumerate(deffers_stats, 1):
        username_display = username if username else "–Ω–µ—Ç —é–∑–µ—Ä–Ω–µ–π–º–∞"
        deffers_text += f"{i}. @{username_display} (ID: {user_id})\n"
        deffers_text += f"–ù–µ–¥–µ–ª—è: {week_count} | –í—Å–µ–≥–æ: {total_count}\n\n"
    
    await message.answer(deffers_text)

@router.message(F.text == '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É')
async def manual_stats(message: Message):
    if not is_admin(message.from_user.id):
        return
    
    await message.answer(
        "‚úèÔ∏è –†—É—á–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:\n\n"
        "–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
        "<code>/set_week_stats —Ç–≥_–∞–π–¥–∏ +/- –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</code> - –¥–ª—è –Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n"
        "<code>/set_total_stats —Ç–≥_–∞–π–¥–∏ +/- –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</code> - –¥–ª—è –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "<code>/set_week_stats 189365026 +5</code> (–î–æ–±–∞–≤–∏—Ç 5 –æ—Ç–∑—ã–≤–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é)\n"
        "<code>/set_total_stats 758465696 -2</code> (–û—Ç–±–µ—Ä—ë—Ç 2 –æ—Ç–∑—ã–≤–∞ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è)",
        parse_mode='HTML'
    )

async def send_review_to_admins(bot, deffer_id, review_id, review_data):
    try:
        chat = await bot.get_chat(deffer_id)
        deffer_username = f"@{chat.username}" if chat.username else f"ID: {deffer_id}"
    except:
        deffer_username = f"ID: {deffer_id}"
    
    for admin_id in ADMIN_IDS:
        try:
            await bot.forward_message(
                chat_id=admin_id,
                from_chat_id=review_data['chat_id'],
                message_id=review_data['message_id']
            )
            
            await bot.send_message(
                chat_id=admin_id,
                text=f"–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤, –ø—Ä–æ—Å—ã–ø–∞–µ–º—Å—è!\n\n–î–µ—Ñ—Ñ–µ—Ä: {deffer_username}",
                reply_markup=get_moderation_keyboard(review_id, deffer_id)
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

@router.callback_query(F.data.startswith("accept_") | F.data.startswith("reject_"))
async def handle_moderation(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è", show_alert=True)
        return

    data = callback.data.split('_')
    action = data[0]
    review_id = int(data[1])
    deffer_id = int(data[2])
    
    if action == 'accept':
        db.update_review_status(review_id, 'accepted', callback.from_user.id)
        await callback.message.edit_text("‚úÖ –û—Ç–∑—ã–≤ –ø—Ä–∏–Ω—è—Ç –∏ –∑–∞—á–∏—Å–ª–µ–Ω –Ω–∞ –±–∞–ª–∞–Ω—Å –¥–µ—Ñ—Ñ–µ—Ä–∞")

        try:
            await callback.bot.send_message(
                deffer_id,
                "‚úÖ –í–∞—à –æ—Ç–∑—ã–≤ –±—ã–ª –ø—Ä–∏–Ω—è—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n\n–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—ã–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞"
            )
        except:
            pass
            
    elif action == 'reject':
        db.update_review_status(review_id, 'rejected', callback.from_user.id)
        await callback.message.edit_text("‚ùå –û—Ç–∑—ã–≤ –æ—Ç–∫–ª–æ–Ω–µ–Ω\n\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–µ—Ñ—Ñ–µ—Ä–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è")

        try:
            await callback.bot.send_message(
                deffer_id,
                "‚ùå –í–∞—à –æ—Ç–∑—ã–≤ –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å"
            )
        except:
            pass

@router.callback_query(F.data.in_(["clear_week_confirm", "notify_winner_confirm", "cancel_action"]))
async def handle_admin_callbacks(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è", show_alert=True)
        return

    if callback.data == 'clear_week_confirm':
        db.clear_week_stats()
        await callback.message.edit_text("‚úÖ –ù–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–∏—â–µ–Ω–∞")
    
    elif callback.data == 'notify_winner_confirm':
        deffers_stats = db.get_all_deffers_stats()
        if not deffers_stats:
            await callback.message.edit_text("‚ùå –ù–µ—Ç –¥–µ—Ñ—Ñ–µ—Ä–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
            return
        
        winner = deffers_stats[0]
        winner_id, winner_username, week_count, total_count = winner

        try:
            await callback.bot.send_message(
                winner_id,
                "üéâ –ê–π –∫—Ä–∞—Å–∞–≤–∞, –ú–∞—Ä–∞—Ç!\n\n–ñ–¥–∏ —Å–≤–æ–∏ 20$ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–π —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è: {e}")
            await callback.message.edit_text(
                f"‚úÖ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω: {winner_username or f'ID: {winner_id}'}\n"
                f"‚ùå –ù–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è."
            )
            return

        db.clear_week_stats()
        
        await callback.message.edit_text(
            f"‚úÖ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω: {winner_username or f'ID: {winner_id}'}\n"
            "–ù–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞–∫ –∂–µ –±—ã–ª–∞ –æ—á–∏—â–µ–Ω–∞."
        )
    
    elif callback.data == 'cancel_action':
        await callback.message.edit_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")

@router.message(Command("add_deffer"))
async def add_deffer(message: Message, command: CommandObject):
    if not is_admin(message.from_user.id):
        return
    
    args = command.args
    if not args:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_deffer —Ç–≥_–∞–π–¥–∏")
        return
    
    try:
        deffer_id = int(args)
        db.set_user_role(deffer_id, 'deffer')
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {deffer_id} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –¥–µ—Ñ—Ñ–µ—Ä")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

@router.message(Command("remove_deffer"))
async def remove_deffer(message: Message, command: CommandObject):
    if not is_admin(message.from_user.id):
        return
    
    args = command.args
    if not args:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /remove_deffer —Ç–≥_–∞–π–¥–∏")
        return
    
    try:
        deffer_id = int(args)
        db.set_user_role(deffer_id, 'user')
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {deffer_id} —É–¥–∞–ª–µ–Ω –∏–∑ –¥–µ—Ñ—Ñ–µ—Ä–æ–≤")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

@router.message(Command("set_week_stats"))
async def set_week_stats(message: Message, command: CommandObject):
    if not is_admin(message.from_user.id):
        return
    
    args = command.args
    if not args:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /set_week_stats —Ç–≥_–∞–π–¥–∏ +/- –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
        return
    
    parts = args.split()
    if len(parts) != 2:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤. –ù—É–∂–Ω–æ: —Ç–≥_–∞–π–¥–∏ +/- –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
        return
    
    try:
        target_id = int(parts[0])
        operation = parts[1]
        
        if not (operation.startswith('+') or operation.startswith('-')):
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ + –∏–ª–∏ - –ø–µ—Ä–µ–¥ —á–∏—Å–ª–æ–º –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/–æ—Ç–±–∏—Ä–∞–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤ —É –¥–µ—Ñ—Ñ–µ—Ä–∞")
            return
        
        amount = int(operation[1:])
        if operation.startswith('-'):
            amount = -amount

        current_week, current_total = db.get_stats(target_id)
        new_week = current_week + amount
        if new_week < 0:
            new_week = 0
        
        db.manual_update_stats(target_id, new_week, current_total)
        await message.answer(f"‚úÖ –ù–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–µ—Ñ—Ñ–µ—Ä–∞ {target_id} –∏–∑–º–µ–Ω–µ–Ω–∞: {current_week} ‚Üí {new_week}")
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã")

@router.message(Command("set_total_stats"))
async def set_total_stats(message: Message, command: CommandObject):
    if not is_admin(message.from_user.id):
        return
    
    args = command.args
    if not args:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /set_total_stats —Ç–≥_–∞–π–¥–∏ +/- –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
        return
    
    parts = args.split()
    if len(parts) != 2:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤. –ù—É–∂–Ω–æ: —Ç–≥_–∞–π–¥–∏ +/- –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
        return
    
    try:
        target_id = int(parts[0])
        operation = parts[1]
        
        if not (operation.startswith('+') or operation.startswith('-')):
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ + –∏–ª–∏ - –ø–µ—Ä–µ–¥ —á–∏—Å–ª–æ–º –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/–æ—Ç–±–∏—Ä–∞–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤ —É –¥–µ—Ñ—Ñ–µ—Ä–∞")
            return
        
        amount = int(operation[1:])
        if operation.startswith('-'):
            amount = -amount

        current_week, current_total = db.get_stats(target_id)
        new_total = current_total + amount
        if new_total < 0:
            new_total = 0
        
        db.manual_update_stats(target_id, current_week, new_total)
        await message.answer(f"‚úÖ –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–µ—Ñ—Ñ–µ—Ä–∞ {target_id} –∏–∑–º–µ–Ω–µ–Ω–∞: {current_total} ‚Üí {new_total}")
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã")